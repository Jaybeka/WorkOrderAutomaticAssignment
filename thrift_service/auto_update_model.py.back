#coding:utf-8

import sys, os
import time
import json

cur_dir = os.path.dirname(os.path.abspath(__file__)) or os.getcwd()
par_dir = os.path.abspath( cur_dir + "/../" )
sys.path.append(par_dir+'/classifier')
sys.path.append(par_dir+'/classifier/data_base')
from aquire_training_data import update_train_data_online
from core_process import Core_Process

reload(sys)
sys.setdefaultencoding('utf-8')

UPDATE_PERIOD = 30 * 24 * 60 * 60       # unit: (s) 默认更新周期为1个月
TIME_STAMP = '2014-04-01'
LOCAL_TRAIN_DATA = par_dir+'/classifier/data_base/train_data.json' 


def read_local_train_data(file_path):
    """
    Input:
        file_path <string>: local train data path. 
    """
    l_res = []
    with open(file_path, 'r') as fp:
        for line in fp.readlines():
            line = json.loads(line)
            l_res.append(line)
    
    return l_res

def write_local_train_data(d_data, file_path):
    with open(file_path, 'w') as fp:
        for data_id,data in d_data.items():
            fp.write(json.dumps(data, ensure_ascii=False) + '\n')
    print "\n****Write the training data: ", file_path, "\n"
            


def update_model(sleep_period, local_file_path, timestamp='2014-04-01'):
    """
    Input:
        sleep_period  <int>: 更新模型的时间周期；单位：秒
        timestamp  <string>: 从数据库获取数据时，输入时间戳；此时间戳以后的数据将被取出；格式：'2016-10-20'
    """
    
    l_res_increment = update_train_data_online(timestamp)
    l_res_increment_str = []
    for d_data in l_res_increment:
        d_temp = {}
        d_temp['id'] = str(d_data['id']) 
        d_temp['description'] = str(d_data['description']) 
        d_temp['label'] = str(d_data['label'])   
        l_res_increment_str.append(d_temp)
    
    l_res_local = read_local_train_data(local_file_path)

    ## 本地数据与数据库取得的数据合并，去重 
    l_train_data_all = l_res_increment_str + l_res_local
    d_train_data_all = {}
    for d_data in l_train_data_all:
        d_train_data_all[d_data['id']] = d_data

    ## 训练数据回写到本地，更新模型
    print "\nModel training ..."
    try:
        if d_train_data_all:
            write_local_train_data(d_train_data_all, LOCAL_TRAIN_DATA)

        CP_obj = Core_Process()
        CP_obj.run('train', LOCAL_TRAIN_DATA)     
    except:
        print "\nError: Can not update the model.\n"

    ## 重载服务
    print "***Reload the service.\n"
    CP_obj.__init__()
    

    ## 设置更新周期
    print "\nUpdate_model service is sleeping ...\n"
    time.sleep(sleep_period)
    


if __name__ == '__main__':
    
    file_path = par_dir+'/classifier/data_base/train_data.json'
    #print read_local_train_data(file_path)    

    while True:
        update_model(sleep_period=UPDATE_PERIOD, local_file_path=LOCAL_TRAIN_DATA,timestamp=TIME_STAMP)
    print "***The update_model service is stopped.\n"


